/*
 * Copyright (C) Vulcan Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * @file
 * @ingroup TreeViewScripts
 * @author: Thomas Schweitzer
 */

if (typeof TreeView == "undefined") {
// Define the TreeView module	
	TreeView = { 
		classes : {}
	};
}
if (typeof TreeView.classes == "undefined") {
	TreeView.classes = {};
}

if (typeof TreeView.singleton == "undefined") {
	TreeView.singleton = {};
}


/**
 * @class TreeViewLoader
 * This is the main class of the TreeView. It initializes all treeviews that
 * are present in an article.
 */
TreeView.classes.TreeViewLoader = function() {
	var $ = jQuery;
	
	//--- Private members ---

	// The instance of this object
	var that = {};

	/**
	 * This function initializes all treeviews on the page. The {{#tree}} 
	 * parser function on the server side adds JavaScript code to the page that 
	 * initializes the array TreeView.trees where all trees are specified. 
	 */
	function construct() {
		// TreeView.trees contains the definition of all trees on the page
		if (typeof TreeView.trees === 'undefined') {
			return;
		}
	    $.jstree._themes = mw.config.get('tvgTreeThemes');

		initializeTrees();
		
	};
	
	/**
	 * This event function is called when a jstree is completely loaded.
	 * All nodes with the attribute 'generateTree="true"' are identified. Their
	 * children are generated by an instance of SolrTreeViewManager.
	 * @param {Object} event
	 * @param {Object} data
	 */
	function onLoadJSTree(event, data) {
		var tree = data.inst;
		
		// Get the tree specification for 'this' tree
		var id = $(this).attr('id');
		for (var i = 0; i < TreeView.trees.length; ++i) {
			var t = TreeView.trees[i];
			if (t.id === id) {
				var treeSpec = t;
			}
		}
		
		
		// Show the input field of the filter if switched on
		var filterInput = null;
		if (treeSpec.filter) {
			filterInput = $('#'+id+'_filter_input');
			$('#'+id+'_filter_wrapper').show();
		}
		
		// Connect the SOLR managers to dynamic branches
		$(this).find('a[generateTree="true"]').each(function (idx, elem) {
			var node = tree._get_node(elem);
			var property = $(elem).attr('property');
			var solrQuery = $(elem).attr('solrQuery');
			solrQuery = solrQuery.replace(/&amp;/g, '&');
			var solrMgr = TreeView.classes.SolrTreeViewManager();
			solrMgr.setTreeProperty(property);
			if (solrQuery) {
				solrMgr.setSolrQuery(solrQuery);
			}
			solrMgr.addWidget(
				new TreeView.classes.JSTreeWidget({tree: tree, parentNode: node}));
			solrMgr.updateTree();
			
			// Handle changes of the filter input field of the tree, if it exists
			if (filterInput) {
				var updateFilter = function (event) {
					var mgr = event.data.solrMgr;
					var value = event.data.input.val();
					mgr.updateFilter(value);
				};
				
				// Wire the change event for the input field
				filterInput.bind('change', {solrMgr: solrMgr, input: filterInput}, updateFilter);
				// Wire the apply button for the input field
				$('#'+id+'_filter_apply').bind('click', {solrMgr: solrMgr, input: filterInput}, updateFilter);
			}
		});
		
	}
	
	/**
	 * Iterates over all tree objects and instantiates those trees which are not
	 * instantiated yet.
	 */
	function initializeTrees() {
		for (var i = 0; i < TreeView.trees.length; ++i) {
			var tree = TreeView.trees[i];
			if (!tree.initialized) {
				var elem = $('#' + tree.id);
				var jsTreeConfig = {
					"json_data": tree.json,
					"plugins": ["themes", "json_data"],
					"themes": {
						"theme": tree.theme
					},
				};
				elem.jstree(jsTreeConfig)
				    .bind("loaded.jstree", onLoadJSTree);
				tree.initialized = true;
			}
		}
	}
	that.initializeTrees = initializeTrees;
	
	construct();
	
	return that;

}


TreeView.singleton.TreeViewLoader = TreeView.classes.TreeViewLoader();
